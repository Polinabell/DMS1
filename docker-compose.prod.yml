# Docker Compose конфигурация для production
version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: defect_management_db_prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./backups:/backups
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - defect_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis для кэширования и Celery
  redis:
    image: redis:7-alpine
    container_name: defect_management_redis_prod
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - defect_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Django приложение
  web:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    image: defect-management:${APP_VERSION:-latest}
    container_name: defect_management_web_prod
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DEBUG=False
      - SENTRY_DSN=${SENTRY_DSN}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    volumes:
      - media_volume_prod:/app/media
      - static_volume_prod:/app/static
      - logs_volume_prod:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - defect_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Celery worker
  celery:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    image: defect-management:${APP_VERSION:-latest}
    container_name: defect_management_celery_prod
    restart: always
    command: ["celery-worker"]
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - media_volume_prod:/app/media
      - logs_volume_prod:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - defect_network_prod
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Celery beat
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    image: defect-management:${APP_VERSION:-latest}
    container_name: defect_management_celery_beat_prod
    restart: always
    command: ["celery-beat"]
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - logs_volume_prod:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - defect_network_prod
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
      restart_policy:
        condition: on-failure
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: defect_management_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/defect-management.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume_prod:/app/static:ro
      - media_volume_prod:/app/media:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - logs_volume_prod:/var/log/nginx
    depends_on:
      - web
    networks:
      - defect_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
      restart_policy:
        condition: on-failure
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "10"

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: defect_management_prometheus_prod
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data_prod:/prometheus
    networks:
      - defect_network_prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
        reservations:
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: defect_management_grafana_prod
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${EMAIL_HOST}:587
      - GF_SMTP_USER=${EMAIL_HOST_USER}
      - GF_SMTP_PASSWORD=${EMAIL_HOST_PASSWORD}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    networks:
      - defect_network_prod
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Node Exporter для системных метрик
  node-exporter:
    image: prom/node-exporter:latest
    container_name: defect_management_node_exporter
    restart: always
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - defect_network_prod
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  # Backup service
  backup:
    build:
      context: ./docker/backup
      dockerfile: Dockerfile
    container_name: defect_management_backup
    restart: always
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
    volumes:
      - ./backups:/backups
      - media_volume_prod:/app/media:ro
    depends_on:
      - db
    networks:
      - defect_network_prod
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

# Именованные тома для production
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  media_volume_prod:
    driver: local
  static_volume_prod:
    driver: local
  logs_volume_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local

# Production сеть
networks:
  defect_network_prod:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
